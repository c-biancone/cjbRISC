 35   @start	SUB R0, R0; use R0 for MAeff
 36   		SUB R1, R1; initialize the other registers
 37   		SUB R2, R2; 
 38   		SUB R3, R3; 
 40   		ST	R3, M[R0, 0x53]; 
 42   		INC R1, 2; R1 = 2
 43   		ADD	R1, R1; R1 = 4
 44   		ADD R1, R1; R1 = 8
 45   		PUSH	R1;
 50   		INC R2, 3; R2 = 3 = 0000_0011
 52   		LD	R3, M[R0, 0x3FF]; R3 = {PB, SW[3:0]}
 54   		AND	R3, R2; R2 = {0000_00, SW[1:0]}
 55   		ST	R3, M[R0, 0x51];
 57   		ADD	R3, R3; 
 58   		ADD	R3, R3;
 60   		LD	R1, M[R0, 0x51];
 61   		ADD	R3, R1; R3 = m_val (4-bits)
 63   		ST	R3, M[R0, 0x51];
 65   		ADD R2, R2; R2 = 6
 66   		ADD R2, R2; R2 = 12 = 0000_1100
 68   		LD	R3, M[R0, 0x3FF]; R3 = {PB, SW[3:0]}
 70   		AND	R3, R2; R3 = {0000, SW[1:0], 00}
 71   		ST	R3, M[R0, 0x52];
 73   		SHRA R3, 2; 
 75   		LD	R1, M[R0, 0x52];
 76   		ADD	R3, R1; R3 = M_val (4-bits)
 78   		ST	R3, M[R0, 0x52];
 83   		LD	R1, M[R0, 0x52]; 
 85   		LD	R2, M[R0, 0x51]; 
 87   @next	SUB R3, R3;
 88   		INC R3, 1;
 90   		AND R3, R2;
 92   		JUMP Z, @mbitz;
 95   		LD	R3, M[R0, 0x53];
 96   		ADD R3, R1;
 97   		ST	R3, M[R0, 0x53];
 99   @mbitz	ADD	R1, R1;
100   		SHRA R2, 1;
102   		POP	R3;
103   		DEC	R3, 1;
104   		JUMP Z, @done;
106   		PUSH	R3;
107   		JUMP U, @next;
109   @done	LD	R3, M[R0, 0x53];
110   		ST	R3, M[R0, 0x3FF]; write out to the LEDs
112   		JUMP U, @start;

