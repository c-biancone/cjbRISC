-- Program Memory Initialization File
-- Created by cjbRISC_ASM

WIDTH = 8;
DEPTH = 1024;

ADDRESS_RADIX = HEX;  % Can be HEX, BIN, or DEC %
DATA_RADIX = BIN; % Can be HEX, BIN, or DEC %

CONTENT BEGIN
%      |Op|R|R|      %
%      |Co|s|s|      %
%      |de|d| |      %

0000 : 00100011;  % @start  INC R0, 0x3; R0 = 0x3 %
0001 : 11000011;  % ST  R0, M[R3, 0x10]; DM[R3] = 0x3 %
0002 : 00010000;
0003 : 01110100;  % CPY R1, R0; R1 = 0x3 %
0004 : 00101101;  % INC R3, 0x1; R3 = 0x1 %
0005 : 00000001;  % ADD R0, R1; R0 = 0x6 %
0006 : 11000011;  % ST  R0, M[R3, 0x10]; DM[R3] = 0x6 %
0007 : 00010000;
0008 : 01110100;  % CPY R1, R0; R1 = 0x6 %
0009 : 00101101;  % INC R3, 0x1; R3 = 0x2 %
000a : 00000001;  % ADD R0, R1; R0 = 0xc %
000b : 11000011;  % ST  R0, M[R3, 0x10]; DM[R3] = 0xc %
000c : 00010000;
000d : 01110100;  % CPY R1, R0; R1 = 0xc %
000e : 00101101;  % INC R3, 0x1; R3 = 0x3 %
000f : 00000001;  % ADD R0, R1; R0 = 0x18 %
0010 : 11000011;  % ST  R0, M[R3, 0x10]; DM[R3] = 0x18 %
0011 : 00010000;
0012 : 01110100;  % CPY R1, R0; R1 = 0x18 %
0013 : 01001111;  % XOR R3, R3; R3 = 0x0 %
0014 : 00000001;  % ADD R0, R1; R0 = 0x30 %
0015 : 11000011;  % ST  R0, M[R3, 0x14]; DM[R3] = 0x30 %
0016 : 00010100;
0017 : 00000001;  % ADD R0, R1; R0 = 0x48 %
0018 : 11000011;  % ST  R0, M[R3, 0xFF]; OP[R3] = 0x48 = H %
0019 : 11111111;
001a : 00101101;  % INC R3, 0x1; R3 = 0x1 %
001b : 00000001;  % ADD R0, R1; R0 = 0x60 %
001c : 10111011;  % LD  R2, M[R3, 0x10]; R2 = 0x6; %
001d : 00010000;
001e : 00000010;  % ADD R0, R2; R0 = 0x66 %
001f : 00110001;  % DEC R0, 0x1; R0 = 0x65 %
0020 : 11000011;  % ST  R0, M[R3, 0xFF]; OP[R3] = 0x65 = e %
0021 : 11111111;
0022 : 00101101;  % INC R3, 0x1; R3 = 0x2 %
0023 : 00000010;  % ADD R0, R2; R0 = 0x6B %
0024 : 00100001;  % INC R0, 0x1; R0 = 0x6C %
0025 : 11000011;  % ST  R0, M[R3, 0xFF]; OP[R3] = 0x6C = l %
0026 : 11111111;
0027 : 11110000;  % PUSH R0; TOS = 0x6C = l %
0028 : 01001111;  % XOR R3, R3; R3 = 0x0 %
0029 : 10110111;  % LD 	R1, M[R3, 0x10]; R1 = 0x3 %
002a : 00010000;
002b : 00000001;  % ADD R0, R1; R0 = 0x6F %
002c : 00101110;  % INC R3, 0x2; R3 = 0x2 %
002d : 10111011;  % LD  R2, M[R3, 0x10]; R2 = 0xc %
002e : 00010000;
002f : 00101101;  % INC R3, 0x1; R3 = 0x3 %
0030 : 11000011;  % ST  R0, M[R3, 0xFF]; OP[R3] = 0x6F = o %
0031 : 11111111;
0032 : 11110000;  % PUSH R0; TOS = 0x6F = o %
0033 : 01001111;  % XOR R3, R3; R3 = 0x0 %
0034 : 10110011;  % LD 	R0, M[R3, 0x14]; R0 = 0x30 %
0035 : 00010100;
0036 : 00010001;  % SUB R0, R1; R0 = 0x2D %
0037 : 00110001;  % DEC R0, 0x1; R0 = 0x2C %
0038 : 00101101;  % INC R3, 0x1; R3 = 0x1 %
0039 : 11000011;  % ST  R0, M[R3, 0xFF]; OP[R3] = 0x2C = , %
003a : 11111111;
003b : 00010010;  % SUB R0, R2; R0 = 0x20 %
003c : 00101110;  % INC R3, 0x2; R3 = 0x2 %
003d : 11000011;  % ST  R0, M[R3, 0xFF]; OP[R3] = 0x20 = " " %
003e : 11111111;
003f : 01001111;  % XOR R3, R3; R3 = 0x0 %
0040 : 10110011;  % LD 	R0, M[R3, 0x14]; R0 = 0x30 %
0041 : 00010100;
0042 : 00000001;  % ADD R0, R1; R0 = 0x33 %
0043 : 00000010;  % ADD R0, R2; R0 = 0x3F %
0044 : 00101111;  % INC R3, 0x3; R3 = 0x3 %
0045 : 10110111;  % LD  R1, M[R3, 0x10]; R1 = 0x18 %
0046 : 00010000;
0047 : 00000001;  % ADD R0, R1; R0 = 0x57 %
0048 : 11000011;  % ST  R0, M[R3, 0xFF]; OP[R3] = 0x57 = W %
0049 : 11111111;
004a : 11100000;  % POP R0; R0 = 0x6F %
004b : 11000011;  % ST 	R0, M[R3, 0xFF]; OP[R3] = 0x6F = o %
004c : 11111111;
004d : 00100011;  % INC R0, 0x3; R0 = 0x72 %
004e : 11000011;  % ST  R0, M[R3, 0xFF]; OP[R3] = 0x72 = r %
004f : 11111111;
0050 : 11100000;  % POP R0; R0 = 0x6C %
0051 : 11000011;  % ST  R0, M[R3, 0xFF]; OP[R3] = 0x6C = l %
0052 : 11111111;
0053 : 00110011;  % DEC R0, 0x3; R0 = 0x69 %
0054 : 00110011;  % DEC R0, 0x3; R0 = 0x66 %
0055 : 00110010;  % DEC R0, 0x2; R0 = 0x64 %
0056 : 11000011;  % ST  R0, M[R3, 0xFF]; OP[R3] = 0x64 = d %
0057 : 11111111;
0058 : 10111011;  % LD  R2, M[R3, 0x10]; R2 = 0x6 %
0059 : 00010000;
005a : 00000110;  % ADD R1, R2; R1 = 0x1E %
005b : 00100111;  % INC R1, 0x3; R1 = 0x21 %
005c : 11000111;  % ST  R1, M[R3, 0xFF]; OP[R3] = 0x21 = ! %
005d : 11111111;
005e : 01000000;  % XOR R0, R0; R0 = 0x0 %
005f : 01000101;  % XOR R1, R1; R1 = 0x0 %
0060 : 01001010;  % XOR R2, R2; R2 = 0x0 %
0061 : 01001111;  % XOR R3, R3; R3 = 0x0, Z = 1 %
0062 : 11010001;  % JUMP Z, @start; %
0063 : 10011101;

[0064..03FF] : 00000000; % Fill the remaining locations with 0 %
END;