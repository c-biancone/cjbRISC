-- Memory File
-- This is Program 2 for Harvard with memory mapped I/O-Ps
-- Calculates necessary values to print out "Hello, World!"
-- in ASCII format.

WIDTH = 8;
DEPTH = 1024;

ADDRESS_RADIX = HEX;	% Can be HEX, BIN or DEC %
DATA_RADIX = BIN;	% Can be HEX, BIN or DEC %

CONTENT BEGIN
%		|Op|R|R|	%
%		|Co|s|s|	%
%		|de|d| |	%

0	:	00100011; % INC R0, #3; R0 = 0x3 %
1	:	11000011; % ST  R0, R3; DM[R3] = 0x3 %
2	:	00010000; % ST MAoffset %
3	:	01110100; % CPY R1, R0; R1 = 0x3 %
4	: 	00101101; % INC R3, #1; R3 = 0x1 %

5	:	00000001; % ADD R0, R1; R0 = 0x6 %
6	:	11000011; % ST  R0, R3; DM[R3] = 0x6 %
7	:	00010000; % ST MAoffset %
8	:	01110100; % CPY R1, R0; R1 = 0x6 %
9	: 	00101101; %  INC R3, #1; R3 = 0x2 %

A 	:	00000001; % ADD R0, R1; R0 = 0xc %
B 	:	11000011; % ST  R0, R3; DM[R3] = 0xc %
C 	:	00010000; % ST MAoffset %
D 	:	01110100; % CPY R1, R0; R1 = 0xc %
E 	: 	00101101; % INC R3, #1; R3 = 0x3 %

F 	:	00000001; % ADD R0, R1; R0 = 0x18 %
10 	:	11000011; % ST  R0, R3; DM[R3] = 0x18 %
11	:	00010000; % ST MAoffset %
12	:	01110100; % CPY R1, R0; R1 = 0x18 %
13	: 	01001111; % XOR R3, R3; R3 = 0x0 %

14	:	00000001; % ADD R0, R1; R0 = 0x30 %
15	:	11000011; % ST  R0, R3; DM[R3] = 0x30 %
16	:	00010100; % ST MAoffset %

17	:	00000001; % ADD R0, R1; R0 = 0x48 %
18	:	11000011; % ST  R0, R3; OP[R3] = 0x48 = H %
19	:	11111111; % ST MAoffset %
1A	: 	00101101; % INC R3, #1; R3 = 0x1 %

1B	:	00000001; % ADD R0, R1; R0 = 0x60 %
1C	:	10111011; % LD R2, R3; R2 = 0x6; %
1D	: 	00010000; % LD MAoffset %
1E	:	00000010; % ADD R0, R2; R0 = 0x66 %
1F	: 	00110001; % DEC R0, #1; R0 = 0x65 %
20	:	11000011; % ST  R0, R3; OP[R3] = 0x65 = e %
21	:	11111111; % ST MAoffset %
22	: 	00101101; % INC R3, #1; R3 = 0x2 %

23	: 	00000010; % ADD R0, R2; R0 = 0x6B %
24	:	00100001; % INC R0, #1; R0 = 0x6C %
25	:	11000011; % ST  R0, R3; OP[R3] = 0x6C = l %
26	:	11111111; % ST MAoffset %
27	: 	11110000; % PUSH R0; TOS = 0x6C = l %
28	: 	01001111; % XOR R3, R3; R3 = 0x0 %

29	: 	10110111; % LD 	R1, R3; R1 = 0x3 %
2A	: 	00010000; % LD MAoffset %
2B 	: 	00000001; % ADD R0, R1; R0 = 0x6F %
2C	: 	00101110; % INC R3, #2; R3 = 0x2 %
2D	: 	10111011; % LD R2, R3; R2 = 0xc %
2E	: 	00010000; % LD MAoffset %
2F	: 	00101101; % INC R3, #1; R3 = 0x3 %

30	:	11000011; % ST  R0, R3; OP[R3] = 0x6F = o %
31	:	11111111; % ST MAoffset %
32	: 	11110000; % PUSH R0; TOS = 0x6F = o %
33	:	01001111; % XOR R3, R3; R3 = 0x0 %

34	:	10110011; % LD 	R0, R3; R0 = 0x30 %
35	: 	00010100; % LD MAoffset %
36	:	00010001; % SUB R0, R1; R0 = 0x2D %
37	:	00110001; %	DEC R0, #1; R0 = 0x2C %
38	:	00101101; % INC R3, #1; R3 = 0x1 %
39	:	11000011; % ST  R0, R3; OP[R3] = 0x2C = , %
3A	:	11111111; % ST MAoffset %

3B	:	00010010; % SUB R0, R2; R0 = 0x20 %
3C	:	00101101; % INC R3, #2; R3 = 0x2 %
3D	:	11000011; % ST  R0, R3; OP[R3] = 0x20 = " " %
3E	:	11111111; % ST MAoffset %

3F	:	01001111; % XOR R3, R3; R3 = 0x0 %
40	:	10110011; % LD 	R0, R3; R0 = 0x30 %
41	: 	00010100; % LD MAoffset %
42	:	00000001; % ADD R0, R1; R0 = 0x33 %
43	:	00000010; % ADD R0, R2; R0 = 0x3F %
44	: 	00101111; % INC R3, #3; R3 = 0x3 %
45	: 	10110111; % LD R1, R3; R1 = 0x18 %
46	: 	00010000; % LD MAoffset %
47	: 	00000001; % ADD R0, R1; R0 = 0x57 %
48	:	11000011; % ST  R0, R3; OP[R3] = 0x57 = W %
49	:	11111111; % ST MAoffset %

4A	: 	11100000; % POP R0; R0 = 0x6F %
4B	:	11000011; % ST 	R0, R3; OP[R3] = 0x6F = o %
4C	: 	11111111; % ST MAoffset; %

4D	: 	00100011; % INC R0, #3; R0 = 0x72 %
4E	: 	11000011; % ST  R0, R3; OP[R3] = 0x72 = r %
4F	: 	11111111; % ST MAoffset;

50 	: 	11100000; % POP R0; R0 = 0x6C;
51	:	11000011; % ST  R0, R3; OP[R3] = 0x6C = l %
52 	:	11111111; % ST MAoffset;

53	: 	00110011; % DEC R0, #3; R0 = 0x69;
54	:	00110011; % DEC R0, #3; R0 = 0x66;
55	: 	00110010; % DEC R0, #2; R0 = 0x64;
56	:	11000011; % ST  R0, R3; OP[R3] = 0x64 = d; %
57	: 	11111111; % ST MAoffset;

58 	: 	10111011; % LD  R2, R3; R2 = 0x6 %
59	: 	00100000; % LD MAoffset; %
5A	: 	00000010; % ADD R1, R2; R1 = 0x1E %
5B	: 	00100111; % INC R1, #3; R1 = 0x21 %
5C 	: 	11000111; % ST  R1, R3; OP[R3] = 0x21 = ! %
5D	: 	11111111; % ST MAoffset; %

5E	:	01000000; % XOR R0, R0; R0 = 0x0;
5F	: 	01000101; % XOR R1, R1; R1 = 0x0;
60	:	01001010; % XOR R2, R2; R2 = 0x0;
61 	: 	01001111; % XOR R3, R3; R3 = 0x0, Z = 1 %
62	:	11010001; % JUMP if Z=1 %
63	:	10011101; % JUMP JAoffset; TO BEGINNING%

[064..3FF]  :   00000000; %Fill the rest of the locations with 0%
END;